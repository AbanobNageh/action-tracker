name: Dependency Updates

on:
  schedule:
    # Run every two weeks on Monday at 9:00 AM UTC
    - cron: '0 9 1,15 * *'
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    name: Update Dependencies
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Install npm-check-updates globally
        run: npm install -g npm-check-updates

      - name: Install xvfb for testing
        run: |
          sudo apt install -y -q --no-install-recommends xvfb

      - name: Check for dependency updates
        id: ncu-check
        run: |
          echo "Checking for available dependency updates..."
          ncu --jsonUpgraded > ncu-available.json
          if [ -s ncu-available.json ] && [ "$(cat ncu-available.json)" != "{}" ]; then
            echo "updates-available=true" >> $GITHUB_OUTPUT
            echo "Available updates found:"
            cat ncu-available.json
          else
            echo "updates-available=false" >> $GITHUB_OUTPUT
            echo "No updates available"
          fi

      - name: Update dependencies with doctor mode
        if: steps.ncu-check.outputs.updates-available == 'true'
        id: update-deps
        run: |
          echo "Running ncu with doctor mode to safely update dependencies..."
          echo "This will iteratively install upgrades and run tests to identify breaking changes."
          
          # Configure system for Electron testing
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          
          # Save original package.json to compare changes later
          cp package.json package.json.original
          
          # Run ncu in doctor mode with custom test command
          # The -d flag enables doctor mode which tests each update individually
          # The -u flag applies the working updates to package.json
          ncu -d -u --doctorTest "npm run test" || {
            echo "Doctor mode completed with some updates applied/rejected. Checking final state..."
            # Check if package.json was actually modified
            if ! diff -q package.json package.json.original > /dev/null; then
              echo "✅ Some dependencies were successfully updated"
              echo "updates-applied=true" >> $GITHUB_OUTPUT
            else
              echo "❌ No updates could be applied safely"
              echo "updates-applied=false" >> $GITHUB_OUTPUT
            fi
            exit 0
          }
          
          # If ncu succeeded completely, check if package.json was modified
          if ! diff -q package.json package.json.original > /dev/null; then
            echo "✅ All available updates were applied successfully"
            echo "updates-applied=true" >> $GITHUB_OUTPUT
          else
            echo "updates-applied=false" >> $GITHUB_OUTPUT
          fi

      - name: Get updated package info
        if: steps.ncu-check.outputs.updates-available == 'true' && steps.update-deps.outputs.updates-applied == 'true'
        id: package-info
        run: |
          # Create a summary of changes by comparing original and updated package.json
          echo "CHANGES_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "## 📦 Dependency Updates" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "The following dependencies have been safely updated using npm-check-updates doctor mode:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Compare package.json files and extract actual changes
          node -e "
            const fs = require('fs');
            const original = JSON.parse(fs.readFileSync('package.json.original', 'utf8'));
            const updated = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            
            const changes = {};
            
            // Check dependencies
            if (original.dependencies && updated.dependencies) {
              for (const [pkg, newVersion] of Object.entries(updated.dependencies)) {
                const oldVersion = original.dependencies[pkg];
                if (oldVersion && oldVersion !== newVersion) {
                  changes[pkg] = { old: oldVersion, new: newVersion, type: 'dependency' };
                }
              }
            }
            
            // Check devDependencies
            if (original.devDependencies && updated.devDependencies) {
              for (const [pkg, newVersion] of Object.entries(updated.devDependencies)) {
                const oldVersion = original.devDependencies[pkg];
                if (oldVersion && oldVersion !== newVersion) {
                  changes[pkg] = { old: oldVersion, new: newVersion, type: 'devDependency' };
                }
              }
            }
            
            // Output the changes
            if (Object.keys(changes).length > 0) {
              for (const [pkg, change] of Object.entries(changes)) {
                console.log(\`- **\${pkg}** (\${change.type}): \${change.old} → \${change.new}\`);
              }
            } else {
              console.log('- No dependency changes detected');
            }
          " >> $GITHUB_OUTPUT
          
          echo "" >> $GITHUB_OUTPUT
          echo "🧪 **Doctor Mode**: Each update was tested individually to ensure compatibility." >> $GITHUB_OUTPUT
          echo "✅ All included updates pass the test suite." >> $GITHUB_OUTPUT
          echo "🚫 Any breaking updates were automatically rejected." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Clean up temporary files before commit
        if: steps.ncu-check.outputs.updates-available == 'true' && steps.update-deps.outputs.updates-applied == 'true'
        run: |
          echo "Removing temporary files to avoid including them in the PR..."
          rm -f package.json.original ncu-available.json

      - name: Close existing dependency update PRs
        if: steps.ncu-check.outputs.updates-available == 'true' && steps.update-deps.outputs.updates-applied == 'true'
        run: |
          echo "Checking for existing dependency update PRs to close..."
          
          # Get list of open PRs with the dependency label
          EXISTING_PRS=$(gh pr list --state open --label "dependencies" --json number,title,headRefName --jq '.[] | select(.title | test("🔄 Automated Dependency Updates|Automated Dependency Updates")) | .number')
          
          if [ -n "$EXISTING_PRS" ]; then
            echo "Found existing dependency update PRs to close:"
            echo "$EXISTING_PRS"
            
            # Close each existing PR
            for PR_NUMBER in $EXISTING_PRS; do
              echo "Closing PR #$PR_NUMBER..."
              gh pr close $PR_NUMBER --comment "Closing this PR as a new dependency update is being created with the latest changes." --delete-branch || true
            done
            
            echo "Closed $(echo "$EXISTING_PRS" | wc -l) existing dependency update PR(s)"
          else
            echo "No existing dependency update PRs found"
          fi
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TRIGGER_PAT }}

      - name: Create Pull Request
        if: steps.ncu-check.outputs.updates-available == 'true' && steps.update-deps.outputs.updates-applied == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.WORKFLOW_TRIGGER_PAT }}
          commit-message: 'chore: update dependencies to latest compatible versions'
          title: '🔄 Automated Dependency Updates'
          body: |
            ${{ steps.package-info.outputs.CHANGES_SUMMARY }}
            
            ---
            
            This PR was automatically created by the dependency update workflow using **npm-check-updates doctor mode**.
            
            Please review the changes and merge if everything looks good.
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          branch: automated/dependency-updates
          branch-suffix: timestamp
          delete-branch: true
          labels: |
            dependencies
            patch-release

      - name: Clean up
        if: always()
        run: |
          rm -f ncu-available.json package.json.original
